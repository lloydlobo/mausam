<svg xmlns="http://www.w3.org/2000/svg" xmlns:fg="http://github.com/jonhoo/inferno" xmlns:xlink="http://www.w3.org/1999/xlink" width="1200" height="662" onload="init(evt)" version="1.1" viewBox="0 0 1200 662"><defs><linearGradient id="background" x1="0" x2="0" y1="0" y2="1"><stop offset="5%" stop-color="#eee"/><stop offset="95%" stop-color="#eeeeb0"/></linearGradient></defs><style type="text/css">text { font-family:monospace; font-size:12px } #title { text-anchor:middle; font-size:17px; } #matched { text-anchor:end; } #search { text-anchor:end; opacity:0.1; cursor:pointer; } #search:hover, #search.show { opacity:1; } #subtitle { text-anchor:middle; font-color:rgb(160,160,160); } #unzoom { cursor:pointer; } #frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; } .hide { display:none; } .parent { opacity:0.5; }</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect width="100%" height="662" x="0" y="0" fill="url(#background)"/><text id="title" x="50%" y="24" fill="#000">Flame Graph</text><text id="unzoom" x="10" y="24" fill="#000" class="hide">Reset Zoom</text><text id="search" x="1190" y="24" fill="#000">Search</text><svg id="frames" width="1180" x="10" total_samples="179"><g><title>__clone3 (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="0%" y="581" fill="#E30007" fg:w="2" fg:x="0"/></g><g><title>start_thread (1 samples, 0.56%)</title><rect width=".559%" height="15" x=".559%" y="565" fill="#D90018" fg:w="1" fg:x="1"/></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.56%)</title><rect width=".559%" height="15" x=".559%" y="549" fill="#DDC136" fg:w="1" fg:x="1"/></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.56%)</title><rect width=".559%" height="15" x=".559%" y="533" fill="#F8D406" fg:w="1" fg:x="1"/></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.56%)</title><rect width=".559%" height="15" x=".559%" y="517" fill="#D04423" fg:w="1" fg:x="1"/></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x=".559%" y="501" fill="#E88000" fg:w="1" fg:x="1"/></g><g><title>async-io (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="0%" y="597" fill="#CFA02F" fg:w="3" fg:x="0"/></g><g><title>async_io::driver::unparker::UNPARKER (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.117%" y="581" fill="#E41722" fg:w="1" fg:x="2"/></g><g><title>polling::epoll::Poller::modify (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.117%" y="565" fill="#DA1E1A" fg:w="1" fg:x="2"/></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="581" fill="#DC7A13" fg:w="1" fg:x="3"/></g><g><title>hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="565" fill="#FAE42A" fg:w="1" fg:x="3"/></g><g><title>&lt;futures_util::future::either::Either&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="549" fill="#F0C11C" fg:w="1" fg:x="3"/></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="533" fill="#D81425" fg:w="1" fg:x="3"/></g><g><title>reqwest::connect::Connector::connect_with_maybe_proxy::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="517" fill="#CEBC27" fg:w="1" fg:x="3"/></g><g><title>&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="501" fill="#D9CF0D" fg:w="1" fg:x="3"/></g><g><title>[libssl.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="485" fill="#E74926" fg:w="1" fg:x="3"/></g><g><title>[libssl.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="469" fill="#E1142E" fg:w="1" fg:x="3"/></g><g><title>ASN1_item_d2i_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="453" fill="#D21F29" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="437" fill="#DDC82F" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="421" fill="#E21A05" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="405" fill="#F9211A" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="389" fill="#EBB71C" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="373" fill="#DD0526" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="357" fill="#F7122A" fg:w="1" fg:x="3"/></g><g><title>ASN1_item_ex_d2i (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="341" fill="#F1832D" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="325" fill="#F91F1D" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="309" fill="#E16F35" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="293" fill="#EEA011" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="277" fill="#D69430" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="261" fill="#E82431" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="245" fill="#D16718" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="229" fill="#E55808" fg:w="1" fg:x="3"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="213" fill="#D5B513" fg:w="1" fg:x="3"/></g><g><title>ASN1_STRING_set (1 samples, 0.56%)</title><rect width=".559%" height="15" x="1.676%" y="197" fill="#FEBF36" fg:w="1" fg:x="3"/></g><g><title>BN_CTX_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="2.235%" y="581" fill="#F15325" fg:w="1" fg:x="4"/></g><g><title>CRYPTO_free_ex_data (1 samples, 0.56%)</title><rect width=".559%" height="15" x="2.793%" y="581" fill="#E92427" fg:w="1" fg:x="5"/></g><g><title>OSSL_DECODER_CTX_add_extra (1 samples, 0.56%)</title><rect width=".559%" height="15" x="3.352%" y="581" fill="#E20336" fg:w="1" fg:x="6"/></g><g><title>[libcrypto.so.3.0.8] (4 samples, 2.23%)</title><rect width="2.235%" height="15" x="3.911%" y="581" fill="#F5C028" fg:w="4" fg:x="7"/><text x="4.161%" y="591.5">[..</text></g><g><title>[unknown] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.145%" y="581" fill="#EEA71D" fg:w="1" fg:x="11"/></g><g><title>__GI___libc_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.145%" y="565" fill="#E8B633" fg:w="1" fg:x="11"/></g><g><title>__libc_start_call_main (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="581" fill="#E73C27" fg:w="1" fg:x="12"/></g><g><title>main (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="565" fill="#D0450C" fg:w="1" fg:x="12"/></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="549" fill="#EB5D25" fg:w="1" fg:x="12"/></g><g><title>mausam::main (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="533" fill="#D57427" fg:w="1" fg:x="12"/></g><g><title>mausam::main::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="517" fill="#DECF1D" fg:w="1" fg:x="12"/></g><g><title>mausam::app::run::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="501" fill="#CE601E" fg:w="1" fg:x="12"/></g><g><title>mausam::app::fetch_weather_notify::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="485" fill="#DA8A04" fg:w="1" fg:x="12"/></g><g><title>reqwest::async_impl::client::ClientBuilder::build (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="469" fill="#FABF0E" fg:w="1" fg:x="12"/></g><g><title>X509_STORE_set_default_paths_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="453" fill="#EF3C28" fg:w="1" fg:x="12"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="437" fill="#CE1B30" fg:w="1" fg:x="12"/></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="421" fill="#E12308" fg:w="1" fg:x="12"/></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="405" fill="#FAD518" fg:w="1" fg:x="12"/></g><g><title>ASN1_item_d2i_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="389" fill="#F77B16" fg:w="1" fg:x="12"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="373" fill="#E78A26" fg:w="1" fg:x="12"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="357" fill="#E7912E" fg:w="1" fg:x="12"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="341" fill="#FB760B" fg:w="1" fg:x="12"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="6.704%" y="325" fill="#D99319" fg:w="1" fg:x="12"/></g><g><title>__rust_probestack (1 samples, 0.56%)</title><rect width=".559%" height="15" x="7.263%" y="581" fill="#F75125" fg:w="1" fg:x="13"/></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="10.614%" y="565" fill="#D10C26" fg:w="1" fg:x="19"/></g><g><title>init_cpu_features (1 samples, 0.56%)</title><rect width=".559%" height="15" x="10.614%" y="549" fill="#E30109" fg:w="1" fg:x="19"/></g><g><title>__GI_exit (1 samples, 0.56%)</title><rect width=".559%" height="15" x="11.173%" y="533" fill="#F82F2B" fg:w="1" fg:x="20"/></g><g><title>__run_exit_handlers (1 samples, 0.56%)</title><rect width=".559%" height="15" x="11.173%" y="517" fill="#DD0A1E" fg:w="1" fg:x="20"/></g><g><title>_dl_fini (1 samples, 0.56%)</title><rect width=".559%" height="15" x="11.173%" y="501" fill="#D2E501" fg:w="1" fg:x="20"/></g><g><title>__GI___libc_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="11.732%" y="485" fill="#DE9425" fg:w="1" fg:x="21"/></g><g><title>_int_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="11.732%" y="469" fill="#EA4321" fg:w="1" fg:x="21"/></g><g><title>BIO_new_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.29%" y="341" fill="#F76223" fg:w="1" fg:x="22"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.29%" y="325" fill="#F78A34" fg:w="1" fg:x="22"/></g><g><title>BUF_MEM_new_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.29%" y="309" fill="#D54F1E" fg:w="1" fg:x="22"/></g><g><title>BUF_MEM_new (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.29%" y="293" fill="#F6B117" fg:w="1" fg:x="22"/></g><g><title>CRYPTO_zalloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.29%" y="277" fill="#E63E1B" fg:w="1" fg:x="22"/></g><g><title>__GI___libc_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.29%" y="261" fill="#D89A08" fg:w="1" fg:x="22"/></g><g><title>_int_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.29%" y="245" fill="#F4232D" fg:w="1" fg:x="22"/></g><g><title>mausam::app::fetch_weather_notify::{{closure}} (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="12.29%" y="453" fill="#FB730C" fg:w="2" fg:x="22"/></g><g><title>reqwest::async_impl::client::ClientBuilder::build (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="12.29%" y="437" fill="#F03632" fg:w="2" fg:x="22"/></g><g><title>X509_STORE_set_default_paths_ex (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="12.29%" y="421" fill="#E95434" fg:w="2" fg:x="22"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="12.29%" y="405" fill="#CF752F" fg:w="2" fg:x="22"/></g><g><title>X509_load_cert_crl_file_ex (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="12.29%" y="389" fill="#F92B27" fg:w="2" fg:x="22"/></g><g><title>PEM_X509_INFO_read_bio_ex (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="12.29%" y="373" fill="#D1262C" fg:w="2" fg:x="22"/></g><g><title>PEM_read_bio_ex (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="12.29%" y="357" fill="#ECD417" fg:w="2" fg:x="22"/></g><g><title>BIO_puts (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.849%" y="341" fill="#F24F15" fg:w="1" fg:x="23"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.849%" y="325" fill="#D36023" fg:w="1" fg:x="23"/></g><g><title>BUF_MEM_grow_clean (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.849%" y="309" fill="#FDD728" fg:w="1" fg:x="23"/></g><g><title>CRYPTO_clear_realloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.849%" y="293" fill="#D35115" fg:w="1" fg:x="23"/></g><g><title>__GI___libc_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="12.849%" y="277" fill="#D0BE26" fg:w="1" fg:x="23"/></g><g><title>ASN1_item_ex_d2i (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="245" fill="#EBD526" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="229" fill="#ED7A26" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="213" fill="#F4DA23" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="197" fill="#F0442F" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="181" fill="#D21035" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="165" fill="#EB7C0C" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="149" fill="#E0A90B" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="133" fill="#FAA602" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="117" fill="#F2D81D" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="101" fill="#E6741B" fg:w="1" fg:x="24"/></g><g><title>OBJ_obj2nid (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="85" fill="#E46330" fg:w="1" fg:x="24"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.408%" y="69" fill="#FD0B06" fg:w="1" fg:x="24"/></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.966%" y="181" fill="#F78F27" fg:w="1" fg:x="25"/></g><g><title>___pthread_rwlock_rdlock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="13.966%" y="165" fill="#EC610A" fg:w="1" fg:x="25"/></g><g><title>CRYPTO_THREAD_read_lock (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="15.643%" y="165" fill="#E9D013" fg:w="3" fg:x="28"/></g><g><title>___pthread_rwlock_rdlock (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="15.643%" y="149" fill="#D8A402" fg:w="3" fg:x="28"/></g><g><title>CRYPTO_THREAD_unlock (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="17.318%" y="165" fill="#DC8105" fg:w="2" fg:x="31"/></g><g><title>___pthread_rwlock_unlock (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="17.318%" y="149" fill="#F2110A" fg:w="2" fg:x="31"/></g><g><title>CRYPTO_get_ex_data (1 samples, 0.56%)</title><rect width=".559%" height="15" x="18.436%" y="165" fill="#F26B00" fg:w="1" fg:x="33"/></g><g><title>OSSL_DECODER_is_a (12 samples, 6.70%)</title><rect width="6.704%" height="15" x="13.966%" y="213" fill="#FB1C1F" fg:w="12" fg:x="25"/><text x="14.216%" y="223.5">OSSL_DECO..</text></g><g><title>[libcrypto.so.3.0.8] (12 samples, 6.70%)</title><rect width="6.704%" height="15" x="13.966%" y="197" fill="#E9DF0A" fg:w="12" fg:x="25"/><text x="14.216%" y="207.5">[libcrypt..</text></g><g><title>[libcrypto.so.3.0.8] (11 samples, 6.15%)</title><rect width="6.145%" height="15" x="14.525%" y="181" fill="#D7151B" fg:w="11" fg:x="26"/><text x="14.775%" y="191.5">[libcryp..</text></g><g><title>OPENSSL_LH_retrieve (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="18.994%" y="165" fill="#E81715" fg:w="3" fg:x="34"/></g><g><title>[libcrypto.so.3.0.8] (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="18.994%" y="149" fill="#F40517" fg:w="3" fg:x="34"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="19.553%" y="133" fill="#E2512E" fg:w="2" fg:x="35"/></g><g><title>OSSL_DECODER_CTX_add_extra (13 samples, 7.26%)</title><rect width="7.263%" height="15" x="13.966%" y="229" fill="#F7461E" fg:w="13" fg:x="25"/><text x="14.216%" y="239.5">OSSL_DECOD..</text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="20.67%" y="213" fill="#D44413" fg:w="1" fg:x="37"/></g><g><title>OPENSSL_sk_insert (1 samples, 0.56%)</title><rect width=".559%" height="15" x="20.67%" y="197" fill="#F0BB0D" fg:w="1" fg:x="37"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="20.67%" y="181" fill="#DF711A" fg:w="1" fg:x="37"/></g><g><title>__realloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="20.67%" y="165" fill="#CEC002" fg:w="1" fg:x="37"/></g><g><title>_int_realloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="20.67%" y="149" fill="#F16C04" fg:w="1" fg:x="37"/></g><g><title>_int_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="20.67%" y="133" fill="#F7AD31" fg:w="1" fg:x="37"/></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="21.229%" y="117" fill="#E07223" fg:w="1" fg:x="38"/></g><g><title>___pthread_rwlock_rdlock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="21.229%" y="101" fill="#F59F1B" fg:w="1" fg:x="38"/></g><g><title>OSSL_DECODER_CTX_new_for_pkey (15 samples, 8.38%)</title><rect width="8.38%" height="15" x="13.966%" y="245" fill="#F5AC2C" fg:w="15" fg:x="25"/><text x="14.216%" y="255.5">OSSL_DECODER..</text></g><g><title>OSSL_DECODER_do_all_provided (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="21.229%" y="229" fill="#EC170B" fg:w="2" fg:x="38"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="21.229%" y="213" fill="#CD7526" fg:w="2" fg:x="38"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="21.229%" y="197" fill="#ED4819" fg:w="2" fg:x="38"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="21.229%" y="181" fill="#F44609" fg:w="2" fg:x="38"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="21.229%" y="165" fill="#D97D27" fg:w="2" fg:x="38"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="21.229%" y="149" fill="#EB240A" fg:w="2" fg:x="38"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="21.229%" y="133" fill="#FB7B2F" fg:w="2" fg:x="38"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="21.788%" y="117" fill="#DD0D0D" fg:w="1" fg:x="39"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="21.788%" y="101" fill="#EE8309" fg:w="1" fg:x="39"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="21.788%" y="85" fill="#D33208" fg:w="1" fg:x="39"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="21.788%" y="69" fill="#F5B618" fg:w="1" fg:x="39"/></g><g><title>OPENSSL_LH_retrieve (1 samples, 0.56%)</title><rect width=".559%" height="15" x="21.788%" y="53" fill="#F20E25" fg:w="1" fg:x="39"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="21.788%" y="37" fill="#F6E40C" fg:w="1" fg:x="39"/></g><g><title>PEM_X509_INFO_read_bio_ex (17 samples, 9.50%)</title><rect width="9.497%" height="15" x="13.408%" y="373" fill="#D5370F" fg:w="17" fg:x="24"/><text x="13.658%" y="383.5">PEM_X509_INFO_..</text></g><g><title>ASN1_item_d2i_ex (17 samples, 9.50%)</title><rect width="9.497%" height="15" x="13.408%" y="357" fill="#D10903" fg:w="17" fg:x="24"/><text x="13.658%" y="367.5">ASN1_item_d2i_..</text></g><g><title>[libcrypto.so.3.0.8] (17 samples, 9.50%)</title><rect width="9.497%" height="15" x="13.408%" y="341" fill="#E63B1E" fg:w="17" fg:x="24"/><text x="13.658%" y="351.5">[libcrypto.so...</text></g><g><title>[libcrypto.so.3.0.8] (17 samples, 9.50%)</title><rect width="9.497%" height="15" x="13.408%" y="325" fill="#D17915" fg:w="17" fg:x="24"/><text x="13.658%" y="335.5">[libcrypto.so...</text></g><g><title>[libcrypto.so.3.0.8] (17 samples, 9.50%)</title><rect width="9.497%" height="15" x="13.408%" y="309" fill="#DC6D0D" fg:w="17" fg:x="24"/><text x="13.658%" y="319.5">[libcrypto.so...</text></g><g><title>[libcrypto.so.3.0.8] (17 samples, 9.50%)</title><rect width="9.497%" height="15" x="13.408%" y="293" fill="#E81201" fg:w="17" fg:x="24"/><text x="13.658%" y="303.5">[libcrypto.so...</text></g><g><title>[libcrypto.so.3.0.8] (17 samples, 9.50%)</title><rect width="9.497%" height="15" x="13.408%" y="277" fill="#D7292A" fg:w="17" fg:x="24"/><text x="13.658%" y="287.5">[libcrypto.so...</text></g><g><title>[libcrypto.so.3.0.8] (17 samples, 9.50%)</title><rect width="9.497%" height="15" x="13.408%" y="261" fill="#E07B24" fg:w="17" fg:x="24"/><text x="13.658%" y="271.5">[libcrypto.so...</text></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.346%" y="245" fill="#F07D03" fg:w="1" fg:x="40"/></g><g><title>mausam::app::run::{{closure}} (20 samples, 11.17%)</title><rect width="11.173%" height="15" x="12.29%" y="469" fill="#CD6232" fg:w="20" fg:x="22"/><text x="12.54%" y="479.5">mausam::app::run..</text></g><g><title>std::sys_common::once::futex::Once::call (18 samples, 10.06%)</title><rect width="10.056%" height="15" x="13.408%" y="453" fill="#CDB925" fg:w="18" fg:x="24"/><text x="13.658%" y="463.5">std::sys_common..</text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (18 samples, 10.06%)</title><rect width="10.056%" height="15" x="13.408%" y="437" fill="#EECF0F" fg:w="18" fg:x="24"/><text x="13.658%" y="447.5">reqwest::async_..</text></g><g><title>X509_STORE_set_default_paths_ex (18 samples, 10.06%)</title><rect width="10.056%" height="15" x="13.408%" y="421" fill="#D5C72A" fg:w="18" fg:x="24"/><text x="13.658%" y="431.5">X509_STORE_set_..</text></g><g><title>[libcrypto.so.3.0.8] (18 samples, 10.06%)</title><rect width="10.056%" height="15" x="13.408%" y="405" fill="#EBC90B" fg:w="18" fg:x="24"/><text x="13.658%" y="415.5">[libcrypto.so.3..</text></g><g><title>X509_load_cert_crl_file_ex (18 samples, 10.06%)</title><rect width="10.056%" height="15" x="13.408%" y="389" fill="#CF2E0B" fg:w="18" fg:x="24"/><text x="13.658%" y="399.5">X509_load_cert_..</text></g><g><title>X509_STORE_add_cert (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="373" fill="#F12323" fg:w="1" fg:x="41"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="357" fill="#F3202F" fg:w="1" fg:x="41"/></g><g><title>X509_OBJECT_retrieve_match (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="341" fill="#F7CA17" fg:w="1" fg:x="41"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="325" fill="#DB660B" fg:w="1" fg:x="41"/></g><g><title>__qsort_r (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="309" fill="#F36E2C" fg:w="1" fg:x="41"/></g><g><title>msort_with_tmp.part.0 (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="293" fill="#DE4A36" fg:w="1" fg:x="41"/></g><g><title>msort_with_tmp.part.0 (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="277" fill="#D8630C" fg:w="1" fg:x="41"/></g><g><title>msort_with_tmp.part.0 (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="261" fill="#E2161A" fg:w="1" fg:x="41"/></g><g><title>msort_with_tmp.part.0 (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="245" fill="#D9A30A" fg:w="1" fg:x="41"/></g><g><title>msort_with_tmp.part.0 (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="229" fill="#D51935" fg:w="1" fg:x="41"/></g><g><title>[libc.so.6] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="22.905%" y="213" fill="#FC691A" fg:w="1" fg:x="41"/></g><g><title>mausam::main::{{closure}} (21 samples, 11.73%)</title><rect width="11.732%" height="15" x="12.29%" y="485" fill="#DC272B" fg:w="21" fg:x="22"/><text x="12.54%" y="495.5">mausam::main::{{c..</text></g><g><title>std::io::stdio::_print (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="469" fill="#E54430" fg:w="1" fg:x="42"/></g><g><title>std::io::stdio::print_to (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="453" fill="#FC0820" fg:w="1" fg:x="42"/></g><g><title>std::io::stdio::stdout (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="437" fill="#DF142B" fg:w="1" fg:x="42"/></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="421" fill="#E55131" fg:w="1" fg:x="42"/></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_try_init (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="405" fill="#EC1C24" fg:w="1" fg:x="42"/></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::initialize (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="389" fill="#F9B91A" fg:w="1" fg:x="42"/></g><g><title>std::sync::once::Once::call_once_force (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="373" fill="#F9AE21" fg:w="1" fg:x="42"/></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="357" fill="#E9C925" fg:w="1" fg:x="42"/></g><g><title>std::sync::once::Once::call_once_force::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="341" fill="#DD4E1A" fg:w="1" fg:x="42"/></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::initialize::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="325" fill="#FA7F1E" fg:w="1" fg:x="42"/></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="309" fill="#E6312C" fg:w="1" fg:x="42"/></g><g><title>std::io::stdio::stdout::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="293" fill="#E54317" fg:w="1" fg:x="42"/></g><g><title>std::io::buffered::linewriter::LineWriter&lt;W&gt;::new (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="277" fill="#F9532F" fg:w="1" fg:x="42"/></g><g><title>std::io::buffered::linewriter::LineWriter&lt;W&gt;::with_capacity (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="261" fill="#D72B03" fg:w="1" fg:x="42"/></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::with_capacity (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="245" fill="#EE9A0D" fg:w="1" fg:x="42"/></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="229" fill="#DB3802" fg:w="1" fg:x="42"/></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="213" fill="#E90004" fg:w="1" fg:x="42"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="197" fill="#EB1E07" fg:w="1" fg:x="42"/></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="181" fill="#FA4F0D" fg:w="1" fg:x="42"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="165" fill="#D39222" fg:w="1" fg:x="42"/></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="149" fill="#E41626" fg:w="1" fg:x="42"/></g><g><title>alloc::alloc::alloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="133" fill="#EBA805" fg:w="1" fg:x="42"/></g><g><title>__rdl_alloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="117" fill="#DD9B10" fg:w="1" fg:x="42"/></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="101" fill="#D7D735" fg:w="1" fg:x="42"/></g><g><title>__GI___libc_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="23.464%" y="85" fill="#DF040A" fg:w="1" fg:x="42"/></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="24.022%" y="485" fill="#EA6706" fg:w="5" fg:x="43"/><text x="24.272%" y="495.5">st..</text></g><g><title>__pthread_clockjoin_ex (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="24.022%" y="469" fill="#E36100" fg:w="5" fg:x="43"/><text x="24.272%" y="479.5">__..</text></g><g><title>__futex_abstimed_wait_common (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="24.022%" y="453" fill="#EA9635" fg:w="5" fg:x="43"/><text x="24.272%" y="463.5">__..</text></g><g><title>__libc_start_main_alias_2 (33 samples, 18.44%)</title><rect width="18.436%" height="15" x="11.173%" y="565" fill="#E4C936" fg:w="33" fg:x="20"/><text x="11.423%" y="575.5">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (33 samples, 18.44%)</title><rect width="18.436%" height="15" x="11.173%" y="549" fill="#DE1625" fg:w="33" fg:x="20"/><text x="11.423%" y="559.5">__libc_start_call_main</text></g><g><title>main (32 samples, 17.88%)</title><rect width="17.877%" height="15" x="11.732%" y="533" fill="#ED3520" fg:w="32" fg:x="21"/><text x="11.982%" y="543.5">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (32 samples, 17.88%)</title><rect width="17.877%" height="15" x="11.732%" y="517" fill="#E91935" fg:w="32" fg:x="21"/><text x="11.982%" y="527.5">std::sys_common::backtrace::..</text></g><g><title>mausam::main (32 samples, 17.88%)</title><rect width="17.877%" height="15" x="11.732%" y="501" fill="#D22822" fg:w="32" fg:x="21"/><text x="11.982%" y="511.5">mausam::main</text></g><g><title>tokio::runtime::park::Inner::park (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="26.816%" y="485" fill="#F1DC2C" fg:w="5" fg:x="48"/><text x="27.066%" y="495.5">to..</text></g><g><title>syscall (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="26.816%" y="469" fill="#EB1C23" fg:w="5" fg:x="48"/><text x="27.066%" y="479.5">sy..</text></g><g><title>_start (40 samples, 22.35%)</title><rect width="22.346%" height="15" x="7.821%" y="581" fill="#D23811" fg:w="40" fg:x="14"/><text x="8.071%" y="591.5">_start</text></g><g><title>_dl_start (1 samples, 0.56%)</title><rect width=".559%" height="15" x="29.609%" y="565" fill="#E0821D" fg:w="1" fg:x="53"/></g><g><title>_dl_start_final (1 samples, 0.56%)</title><rect width=".559%" height="15" x="29.609%" y="549" fill="#EBD408" fg:w="1" fg:x="53"/></g><g><title>_dl_sysdep_start (1 samples, 0.56%)</title><rect width=".559%" height="15" x="29.609%" y="533" fill="#DF2132" fg:w="1" fg:x="53"/></g><g><title>dl_main (1 samples, 0.56%)</title><rect width=".559%" height="15" x="29.609%" y="517" fill="#DB950D" fg:w="1" fg:x="53"/></g><g><title>_dl_relocate_object (1 samples, 0.56%)</title><rect width=".559%" height="15" x="29.609%" y="501" fill="#FA9C1D" fg:w="1" fg:x="53"/></g><g><title>elf_dynamic_do_Rela (1 samples, 0.56%)</title><rect width=".559%" height="15" x="29.609%" y="485" fill="#D8C113" fg:w="1" fg:x="53"/></g><g><title>elf_machine_rela_relative (1 samples, 0.56%)</title><rect width=".559%" height="15" x="29.609%" y="469" fill="#D8870E" fg:w="1" fg:x="53"/></g><g><title>mausam::app::NotifyData::show (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="30.168%" y="581" fill="#F12F05" fg:w="6" fg:x="54"/><text x="30.418%" y="591.5">mau..</text></g><g><title>parking::Inner::park (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="30.168%" y="565" fill="#E92A23" fg:w="6" fg:x="54"/><text x="30.418%" y="575.5">par..</text></g><g><title>syscall (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="30.168%" y="549" fill="#E70D06" fg:w="6" fg:x="54"/><text x="30.418%" y="559.5">sys..</text></g><g><title>EVP_KEYMGMT_do_all_provided (1 samples, 0.56%)</title><rect width=".559%" height="15" x="33.52%" y="309" fill="#CFB528" fg:w="1" fg:x="60"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="33.52%" y="293" fill="#FEAD31" fg:w="1" fg:x="60"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="33.52%" y="277" fill="#DD0126" fg:w="1" fg:x="60"/></g><g><title>EVP_KEYMGMT_is_a (1 samples, 0.56%)</title><rect width=".559%" height="15" x="34.078%" y="309" fill="#CE7C2E" fg:w="1" fg:x="61"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="34.078%" y="293" fill="#F9150B" fg:w="1" fg:x="61"/></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="34.078%" y="277" fill="#DEC928" fg:w="1" fg:x="61"/></g><g><title>___pthread_rwlock_unlock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="34.078%" y="261" fill="#EB3D1D" fg:w="1" fg:x="61"/></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="34.637%" y="261" fill="#DBCF03" fg:w="1" fg:x="62"/></g><g><title>___pthread_rwlock_unlock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="34.637%" y="245" fill="#DE382E" fg:w="1" fg:x="62"/></g><g><title>CRYPTO_THREAD_unlock (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="35.754%" y="245" fill="#EF4C36" fg:w="2" fg:x="64"/></g><g><title>___pthread_rwlock_unlock (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="35.754%" y="229" fill="#E77C1B" fg:w="2" fg:x="64"/></g><g><title>CRYPTO_strndup (1 samples, 0.56%)</title><rect width=".559%" height="15" x="36.871%" y="245" fill="#F9C306" fg:w="1" fg:x="66"/></g><g><title>OPENSSL_strnlen (1 samples, 0.56%)</title><rect width=".559%" height="15" x="36.871%" y="229" fill="#EDAE2F" fg:w="1" fg:x="66"/></g><g><title>OSSL_DECODER_CTX_add_extra (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="34.637%" y="309" fill="#CEC91F" fg:w="6" fg:x="62"/><text x="34.887%" y="319.5">OSS..</text></g><g><title>OSSL_DECODER_is_a (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="34.637%" y="293" fill="#E73934" fg:w="6" fg:x="62"/><text x="34.887%" y="303.5">OSS..</text></g><g><title>[libcrypto.so.3.0.8] (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="34.637%" y="277" fill="#F8B116" fg:w="6" fg:x="62"/><text x="34.887%" y="287.5">[li..</text></g><g><title>[libcrypto.so.3.0.8] (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="35.196%" y="261" fill="#D7D325" fg:w="5" fg:x="63"/><text x="35.446%" y="271.5">[l..</text></g><g><title>OPENSSL_LH_retrieve (1 samples, 0.56%)</title><rect width=".559%" height="15" x="37.43%" y="245" fill="#F18033" fg:w="1" fg:x="67"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="37.43%" y="229" fill="#E3A51F" fg:w="1" fg:x="67"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="37.43%" y="213" fill="#E4A718" fg:w="1" fg:x="67"/></g><g><title>OSSL_DECODER_CTX_new_for_pkey (10 samples, 5.59%)</title><rect width="5.587%" height="15" x="33.52%" y="325" fill="#E48F0C" fg:w="10" fg:x="60"/><text x="33.77%" y="335.5">OSSL_DE..</text></g><g><title>OSSL_DECODER_do_all_provided (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="37.989%" y="309" fill="#F99508" fg:w="2" fg:x="68"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="37.989%" y="293" fill="#F3232C" fg:w="2" fg:x="68"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="37.989%" y="277" fill="#F65909" fg:w="2" fg:x="68"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="38.547%" y="261" fill="#E9D50D" fg:w="1" fg:x="69"/></g><g><title>OSSL_DECODER_is_a (1 samples, 0.56%)</title><rect width=".559%" height="15" x="38.547%" y="245" fill="#E98D29" fg:w="1" fg:x="69"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="38.547%" y="229" fill="#EFA704" fg:w="1" fg:x="69"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="38.547%" y="213" fill="#D1D910" fg:w="1" fg:x="69"/></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="38.547%" y="197" fill="#DB5823" fg:w="1" fg:x="69"/></g><g><title>___pthread_rwlock_rdlock (1 samples, 0.56%)</title><rect width=".559%" height="15" x="38.547%" y="181" fill="#DCC117" fg:w="1" fg:x="69"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.106%" y="229" fill="#E65A34" fg:w="1" fg:x="70"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.106%" y="213" fill="#FC6A13" fg:w="1" fg:x="70"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.106%" y="197" fill="#CE4A14" fg:w="1" fg:x="70"/></g><g><title>EVP_PKEY_set_type_by_keymgmt (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.106%" y="181" fill="#E68A2C" fg:w="1" fg:x="70"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.106%" y="165" fill="#EBB62B" fg:w="1" fg:x="70"/></g><g><title>OPENSSL_LH_doall_arg (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.106%" y="149" fill="#F21033" fg:w="1" fg:x="70"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.106%" y="133" fill="#F80904" fg:w="1" fg:x="70"/></g><g><title>OSSL_DECODER_from_data (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="39.106%" y="325" fill="#D21F16" fg:w="2" fg:x="70"/></g><g><title>OSSL_DECODER_from_bio (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="39.106%" y="309" fill="#EF3627" fg:w="2" fg:x="70"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="39.106%" y="293" fill="#E66329" fg:w="2" fg:x="70"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="39.106%" y="277" fill="#FD6A0C" fg:w="2" fg:x="70"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="39.106%" y="261" fill="#D52E29" fg:w="2" fg:x="70"/></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="39.106%" y="245" fill="#D78523" fg:w="2" fg:x="70"/></g><g><title>d2i_EC_PUBKEY (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="229" fill="#D51C05" fg:w="1" fg:x="71"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="213" fill="#D74D31" fg:w="1" fg:x="71"/></g><g><title>ASN1_item_d2i_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="197" fill="#F86416" fg:w="1" fg:x="71"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="181" fill="#D04309" fg:w="1" fg:x="71"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="165" fill="#DB8515" fg:w="1" fg:x="71"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="149" fill="#F62E1D" fg:w="1" fg:x="71"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="133" fill="#F6B934" fg:w="1" fg:x="71"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="117" fill="#FC880B" fg:w="1" fg:x="71"/></g><g><title>EC_GROUP_new_by_curve_name_ex (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="101" fill="#DB8A35" fg:w="1" fg:x="71"/></g><g><title>BN_bin2bn (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="85" fill="#D33317" fg:w="1" fg:x="71"/></g><g><title>BN_new (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="69" fill="#F7DD1C" fg:w="1" fg:x="71"/></g><g><title>CRYPTO_zalloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="53" fill="#FBDE2D" fg:w="1" fg:x="71"/></g><g><title>__GI___libc_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="39.665%" y="37" fill="#D9A235" fg:w="1" fg:x="71"/></g><g><title>ASN1_STRING_to_UTF8 (1 samples, 0.56%)</title><rect width=".559%" height="15" x="40.224%" y="309" fill="#E55D0E" fg:w="1" fg:x="72"/></g><g><title>ASN1_mbstring_copy (1 samples, 0.56%)</title><rect width=".559%" height="15" x="40.224%" y="293" fill="#D14331" fg:w="1" fg:x="72"/></g><g><title>ASN1_mbstring_ncopy (1 samples, 0.56%)</title><rect width=".559%" height="15" x="40.224%" y="277" fill="#D5571D" fg:w="1" fg:x="72"/></g><g><title>mausam::main (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="581" fill="#CD9734" fg:w="14" fg:x="60"/><text x="33.77%" y="591.5">mausam::main</text></g><g><title>mausam::main::{{closure}} (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="565" fill="#FDD727" fg:w="14" fg:x="60"/><text x="33.77%" y="575.5">mausam::mai..</text></g><g><title>mausam::app::run::{{closure}} (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="549" fill="#DDDC29" fg:w="14" fg:x="60"/><text x="33.77%" y="559.5">mausam::app..</text></g><g><title>mausam::app::fetch_weather_notify::{{closure}} (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="533" fill="#DA8515" fg:w="14" fg:x="60"/><text x="33.77%" y="543.5">mausam::app..</text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="517" fill="#DDC12B" fg:w="14" fg:x="60"/><text x="33.77%" y="527.5">reqwest::as..</text></g><g><title>X509_STORE_set_default_paths_ex (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="501" fill="#F08034" fg:w="14" fg:x="60"/><text x="33.77%" y="511.5">X509_STORE_..</text></g><g><title>[libcrypto.so.3.0.8] (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="485" fill="#FD720C" fg:w="14" fg:x="60"/><text x="33.77%" y="495.5">[libcrypto...</text></g><g><title>X509_load_cert_crl_file_ex (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="469" fill="#D7DF2F" fg:w="14" fg:x="60"/><text x="33.77%" y="479.5">X509_load_c..</text></g><g><title>PEM_X509_INFO_read_bio_ex (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="453" fill="#F8E117" fg:w="14" fg:x="60"/><text x="33.77%" y="463.5">PEM_X509_IN..</text></g><g><title>ASN1_item_d2i_ex (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="437" fill="#FA6C00" fg:w="14" fg:x="60"/><text x="33.77%" y="447.5">ASN1_item_d..</text></g><g><title>[libcrypto.so.3.0.8] (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="421" fill="#E4D007" fg:w="14" fg:x="60"/><text x="33.77%" y="431.5">[libcrypto...</text></g><g><title>[libcrypto.so.3.0.8] (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="405" fill="#F42D0A" fg:w="14" fg:x="60"/><text x="33.77%" y="415.5">[libcrypto...</text></g><g><title>[libcrypto.so.3.0.8] (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="389" fill="#CF7D19" fg:w="14" fg:x="60"/><text x="33.77%" y="399.5">[libcrypto...</text></g><g><title>[libcrypto.so.3.0.8] (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="373" fill="#D2C312" fg:w="14" fg:x="60"/><text x="33.77%" y="383.5">[libcrypto...</text></g><g><title>[libcrypto.so.3.0.8] (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="357" fill="#F9500C" fg:w="14" fg:x="60"/><text x="33.77%" y="367.5">[libcrypto...</text></g><g><title>[libcrypto.so.3.0.8] (14 samples, 7.82%)</title><rect width="7.821%" height="15" x="33.52%" y="341" fill="#DD4109" fg:w="14" fg:x="60"/><text x="33.77%" y="351.5">[libcrypto...</text></g><g><title>[libcrypto.so.3.0.8] (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="40.224%" y="325" fill="#EB3124" fg:w="2" fg:x="72"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="40.782%" y="309" fill="#E12014" fg:w="1" fg:x="73"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="40.782%" y="293" fill="#D78D2E" fg:w="1" fg:x="73"/></g><g><title>ASN1_item_ex_i2d (1 samples, 0.56%)</title><rect width=".559%" height="15" x="40.782%" y="277" fill="#FAA02F" fg:w="1" fg:x="73"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="40.782%" y="261" fill="#D8DE28" fg:w="1" fg:x="73"/></g><g><title>ASN1_item_ex_i2d (1 samples, 0.56%)</title><rect width=".559%" height="15" x="40.782%" y="245" fill="#EAD927" fg:w="1" fg:x="73"/></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="41.341%" y="565" fill="#CFB228" fg:w="2" fg:x="74"/></g><g><title>zbus::socket_reader::SocketReader::receive_msg::{{closure}}::{{closure}} (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="41.341%" y="549" fill="#DD880D" fg:w="2" fg:x="74"/></g><g><title>&lt;async_io::Async&lt;std::os::unix::net::stream::UnixStream&gt; as zbus::raw::socket::Socket&gt;::poll_recvmsg (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="41.341%" y="533" fill="#F9C70A" fg:w="2" fg:x="74"/></g><g><title>__GI___libc_malloc (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="41.341%" y="517" fill="#F9DE0D" fg:w="2" fg:x="74"/></g><g><title>_int_malloc (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="41.341%" y="501" fill="#F4B926" fg:w="2" fg:x="74"/></g><g><title>malloc_consolidate (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="41.341%" y="485" fill="#ECCA09" fg:w="2" fg:x="74"/></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.56%)</title><rect width=".559%" height="15" x="41.899%" y="469" fill="#FAE525" fg:w="1" fg:x="75"/></g><g><title>mausam (74 samples, 41.34%)</title><rect width="41.341%" height="15" x="1.676%" y="597" fill="#CEAE17" fg:w="74" fg:x="3"/><text x="1.926%" y="607.5">mausam</text></g><g><title>zbus::connection_builder::ConnectionBuilder::build::{{closure}} (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="41.341%" y="581" fill="#D3212B" fg:w="3" fg:x="74"/></g><g><title>zbus::raw::handshake::HandshakeCommon&lt;S&gt;::read_command (1 samples, 0.56%)</title><rect width=".559%" height="15" x="42.458%" y="565" fill="#F53A32" fg:w="1" fg:x="76"/></g><g><title>&lt;async_io::Async&lt;std::os::unix::net::stream::UnixStream&gt; as zbus::raw::socket::Socket&gt;::poll_recvmsg (1 samples, 0.56%)</title><rect width=".559%" height="15" x="42.458%" y="549" fill="#F44424" fg:w="1" fg:x="76"/></g><g><title>__GI___libc_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="42.458%" y="533" fill="#E8E50F" fg:w="1" fg:x="76"/></g><g><title>_int_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="42.458%" y="517" fill="#FE1E17" fg:w="1" fg:x="76"/></g><g><title>__GI_madvise (19 samples, 10.61%)</title><rect width="10.614%" height="15" x="49.162%" y="549" fill="#EBA00E" fg:w="19" fg:x="88"/><text x="49.412%" y="559.5">__GI_madvise</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.56%)</title><rect width=".559%" height="15" x="59.776%" y="485" fill="#D49B2C" fg:w="1" fg:x="107"/></g><g><title>__pthread_getattr_np (1 samples, 0.56%)</title><rect width=".559%" height="15" x="59.776%" y="469" fill="#E20232" fg:w="1" fg:x="107"/></g><g><title>__pthread_attr_setaffinity_alias (1 samples, 0.56%)</title><rect width=".559%" height="15" x="59.776%" y="453" fill="#EAB106" fg:w="1" fg:x="107"/></g><g><title>[libc.so.6] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="59.776%" y="437" fill="#D91809" fg:w="1" fg:x="107"/></g><g><title>std::sys::unix::futex::futex_wait (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="60.335%" y="469" fill="#DC0D2E" fg:w="5" fg:x="108"/><text x="60.585%" y="479.5">st..</text></g><g><title>syscall (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="60.335%" y="453" fill="#EFDD1B" fg:w="5" fg:x="108"/><text x="60.585%" y="463.5">sy..</text></g><g><title>core::bool::&lt;impl bool&gt;::then (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="63.129%" y="437" fill="#DEC619" fg:w="3" fg:x="113"/></g><g><title>std::sys::unix::futex::futex_wait (34 samples, 18.99%)</title><rect width="18.994%" height="15" x="63.129%" y="453" fill="#D3630D" fg:w="34" fg:x="113"/><text x="63.379%" y="463.5">std::sys::unix::futex::futex_w..</text></g><g><title>syscall (31 samples, 17.32%)</title><rect width="17.318%" height="15" x="64.805%" y="437" fill="#E86F1F" fg:w="31" fg:x="116"/><text x="65.055%" y="447.5">syscall</text></g><g><title>core::hint::spin_loop (1 samples, 0.56%)</title><rect width=".559%" height="15" x="82.123%" y="437" fill="#F55225" fg:w="1" fg:x="147"/></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.56%)</title><rect width=".559%" height="15" x="82.123%" y="421" fill="#E3952E" fg:w="1" fg:x="147"/></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (37 samples, 20.67%)</title><rect width="20.67%" height="15" x="63.129%" y="469" fill="#DA2432" fg:w="37" fg:x="113"/><text x="63.379%" y="479.5">std::sys::unix::locks::futex_mute..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="82.123%" y="453" fill="#E25030" fg:w="3" fg:x="147"/></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="82.682%" y="437" fill="#EEE00F" fg:w="2" fg:x="148"/></g><g><title>core::sync::atomic::atomic_load (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="82.682%" y="421" fill="#F1880A" fg:w="2" fg:x="148"/></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="453" fill="#D0202D" fg:w="1" fg:x="150"/></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="437" fill="#CF8709" fg:w="1" fg:x="150"/></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="421" fill="#CE562C" fg:w="1" fg:x="150"/></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="405" fill="#F5B10F" fg:w="1" fg:x="150"/></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="389" fill="#CE4032" fg:w="1" fg:x="150"/></g><g><title>__GI_getaddrinfo (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="373" fill="#EA2428" fg:w="1" fg:x="150"/></g><g><title>nss_database_check_reload_and_get (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="357" fill="#D54008" fg:w="1" fg:x="150"/></g><g><title>_IO_new_fclose (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="341" fill="#D24B24" fg:w="1" fg:x="150"/></g><g><title>_IO_new_file_close_it (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="325" fill="#E55815" fg:w="1" fg:x="150"/></g><g><title>__GI__IO_file_close (1 samples, 0.56%)</title><rect width=".559%" height="15" x="83.799%" y="309" fill="#FCCC2F" fg:w="1" fg:x="150"/></g><g><title>syscall (4 samples, 2.23%)</title><rect width="2.235%" height="15" x="84.358%" y="437" fill="#D04D1B" fg:w="4" fg:x="151"/><text x="84.608%" y="447.5">s..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (10 samples, 5.59%)</title><rect width="5.587%" height="15" x="84.358%" y="453" fill="#DD4C1A" fg:w="10" fg:x="151"/><text x="84.608%" y="463.5">tokio::..</text></g><g><title>tokio::runtime::time::Driver::park_internal (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="86.592%" y="437" fill="#E18B12" fg:w="6" fg:x="155"/><text x="86.842%" y="447.5">tok..</text></g><g><title>tokio::runtime::io::Driver::turn (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="87.151%" y="421" fill="#E6890B" fg:w="5" fg:x="156"/><text x="87.401%" y="431.5">to..</text></g><g><title>epoll_wait (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="87.151%" y="405" fill="#D41C01" fg:w="5" fg:x="156"/><text x="87.401%" y="415.5">ep..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (56 samples, 31.28%)</title><rect width="31.285%" height="15" x="59.776%" y="517" fill="#F8A411" fg:w="56" fg:x="107"/><text x="60.026%" y="527.5">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnO..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (56 samples, 31.28%)</title><rect width="31.285%" height="15" x="59.776%" y="501" fill="#DEAB2A" fg:w="56" fg:x="107"/><text x="60.026%" y="511.5">core::ops::function::FnOnce::call_once{{vtable.shim..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (55 samples, 30.73%)</title><rect width="30.726%" height="15" x="60.335%" y="485" fill="#F3542D" fg:w="55" fg:x="108"/><text x="60.585%" y="495.5">std::sys_common::backtrace::__rust_begin_short_bac..</text></g><g><title>tokio::runtime::task::raw::poll (13 samples, 7.26%)</title><rect width="7.263%" height="15" x="83.799%" y="469" fill="#FC3117" fg:w="13" fg:x="150"/><text x="84.049%" y="479.5">tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="89.944%" y="453" fill="#D71307" fg:w="2" fg:x="161"/></g><g><title>tokio::runtime::task::raw::poll (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="89.944%" y="437" fill="#EE5129" fg:w="2" fg:x="161"/></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="421" fill="#D2C725" fg:w="1" fg:x="162"/></g><g><title>core::ptr::drop_in_place&lt;hyper::client::conn::ProtoClient&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt; (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="405" fill="#F4C031" fg:w="1" fg:x="162"/></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;tokio::net::tcp::stream::TcpStream&gt;&gt; (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="389" fill="#E2D30B" fg:w="1" fg:x="162"/></g><g><title>SSL_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="373" fill="#ECA236" fg:w="1" fg:x="162"/></g><g><title>SSL_CTX_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="357" fill="#DCE509" fg:w="1" fg:x="162"/></g><g><title>X509_STORE_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="341" fill="#FA5716" fg:w="1" fg:x="162"/></g><g><title>OPENSSL_sk_pop_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="325" fill="#EF2B11" fg:w="1" fg:x="162"/></g><g><title>X509_OBJECT_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="309" fill="#E7B119" fg:w="1" fg:x="162"/></g><g><title>ASN1_item_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="293" fill="#DBB301" fg:w="1" fg:x="162"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="277" fill="#EEDB35" fg:w="1" fg:x="162"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="261" fill="#E8A724" fg:w="1" fg:x="162"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="245" fill="#F41333" fg:w="1" fg:x="162"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="229" fill="#E00616" fg:w="1" fg:x="162"/></g><g><title>[libcrypto.so.3.0.8] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="213" fill="#E09105" fg:w="1" fg:x="162"/></g><g><title>__free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="197" fill="#EA8231" fg:w="1" fg:x="162"/></g><g><title>_int_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="90.503%" y="181" fill="#FE0602" fg:w="1" fg:x="162"/></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (57 samples, 31.84%)</title><rect width="31.844%" height="15" x="59.776%" y="533" fill="#D0602E" fg:w="57" fg:x="107"/><text x="60.026%" y="543.5">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnO..</text></g><g><title>alloc::alloc::box_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="91.061%" y="517" fill="#EF0327" fg:w="1" fg:x="163"/></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.56%)</title><rect width=".559%" height="15" x="91.061%" y="501" fill="#E9D201" fg:w="1" fg:x="163"/></g><g><title>alloc::alloc::dealloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="91.061%" y="485" fill="#F48925" fg:w="1" fg:x="163"/></g><g><title>__rdl_dealloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="91.061%" y="469" fill="#F08802" fg:w="1" fg:x="163"/></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="91.061%" y="453" fill="#EF1225" fg:w="1" fg:x="163"/></g><g><title>__free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="91.061%" y="437" fill="#DAB916" fg:w="1" fg:x="163"/></g><g><title>__GI___munmap (5 samples, 2.79%)</title><rect width="2.793%" height="15" x="91.62%" y="485" fill="#E1DA04" fg:w="5" fg:x="164"/><text x="91.87%" y="495.5">__..</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="91.62%" y="533" fill="#E6B620" fg:w="6" fg:x="164"/><text x="91.87%" y="543.5">cor..</text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="91.62%" y="517" fill="#F2382B" fg:w="6" fg:x="164"/><text x="91.87%" y="527.5">&lt;st..</text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (6 samples, 3.35%)</title><rect width="3.352%" height="15" x="91.62%" y="501" fill="#E96318" fg:w="6" fg:x="164"/><text x="91.87%" y="511.5">std..</text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.56%)</title><rect width=".559%" height="15" x="94.413%" y="485" fill="#EAD12A" fg:w="1" fg:x="169"/></g><g><title>__GI___sysconf (1 samples, 0.56%)</title><rect width=".559%" height="15" x="94.413%" y="469" fill="#E3070C" fg:w="1" fg:x="169"/></g><g><title>__clone3 (97 samples, 54.19%)</title><rect width="54.19%" height="15" x="43.017%" y="581" fill="#F5CB2B" fg:w="97" fg:x="77"/><text x="43.267%" y="591.5">__clone3</text></g><g><title>start_thread (87 samples, 48.60%)</title><rect width="48.603%" height="15" x="48.603%" y="565" fill="#EECD21" fg:w="87" fg:x="87"/><text x="48.853%" y="575.5">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (67 samples, 37.43%)</title><rect width="37.43%" height="15" x="59.776%" y="549" fill="#E73807" fg:w="67" fg:x="107"/><text x="60.026%" y="559.5">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (4 samples, 2.23%)</title><rect width="2.235%" height="15" x="94.972%" y="533" fill="#F4BA1D" fg:w="4" fg:x="170"/><text x="95.222%" y="543.5">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 2.23%)</title><rect width="2.235%" height="15" x="94.972%" y="517" fill="#EA6F1F" fg:w="4" fg:x="170"/><text x="95.222%" y="527.5">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 2.23%)</title><rect width="2.235%" height="15" x="94.972%" y="501" fill="#F1950A" fg:w="4" fg:x="170"/><text x="95.222%" y="511.5">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 2.23%)</title><rect width="2.235%" height="15" x="94.972%" y="485" fill="#F9CE2C" fg:w="4" fg:x="170"/><text x="95.222%" y="495.5">s..</text></g><g><title>__GI___mmap64 (4 samples, 2.23%)</title><rect width="2.235%" height="15" x="94.972%" y="469" fill="#FB991E" fg:w="4" fg:x="170"/><text x="95.222%" y="479.5">_..</text></g><g><title>tokio-runtime-w (98 samples, 54.75%)</title><rect width="54.749%" height="15" x="43.017%" y="597" fill="#EF9826" fg:w="98" fg:x="77"/><text x="43.267%" y="607.5">tokio-runtime-w</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.56%)</title><rect width=".559%" height="15" x="97.207%" y="581" fill="#F98B2F" fg:w="1" fg:x="174"/></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.56%)</title><rect width=".559%" height="15" x="97.207%" y="565" fill="#F44023" fg:w="1" fg:x="174"/></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.56%)</title><rect width=".559%" height="15" x="97.207%" y="549" fill="#D82E0F" fg:w="1" fg:x="174"/></g><g><title>std::sys::unix::os::page_size (1 samples, 0.56%)</title><rect width=".559%" height="15" x="97.207%" y="533" fill="#FA4A13" fg:w="1" fg:x="174"/></g><g><title>[unknown] (1 samples, 0.56%)</title><rect width=".559%" height="15" x="97.765%" y="581" fill="#F92A21" fg:w="1" fg:x="175"/></g><g><title>__GI___sysconf (1 samples, 0.56%)</title><rect width=".559%" height="15" x="97.765%" y="565" fill="#F29511" fg:w="1" fg:x="175"/></g><g><title>core::ptr::drop_in_place&lt;zbus::socket_reader::SocketReader::receive_msg::{{closure}}&gt; (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.324%" y="453" fill="#F41D15" fg:w="1" fg:x="176"/></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.324%" y="437" fill="#DC8225" fg:w="1" fg:x="176"/></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.324%" y="421" fill="#D34302" fg:w="1" fg:x="176"/></g><g><title>core::ptr::drop_in_place&lt;zbus::match_rule::MatchRule&gt; (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.324%" y="405" fill="#EB4434" fg:w="1" fg:x="176"/></g><g><title>__free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.324%" y="389" fill="#F68E03" fg:w="1" fg:x="176"/></g><g><title>_int_free (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.324%" y="373" fill="#F11907" fg:w="1" fg:x="176"/></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.324%" y="357" fill="#F27727" fg:w="1" fg:x="176"/></g><g><title>zbus::message_header::MessagePrimaryHeader::read (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.883%" y="437" fill="#F1622D" fg:w="1" fg:x="177"/></g><g><title>&lt;zbus::message_header::MessagePrimaryHeader as zvariant::type::Type&gt;::signature (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.883%" y="421" fill="#FE1C1E" fg:w="1" fg:x="177"/></g><g><title>__GI___libc_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.883%" y="405" fill="#F18E36" fg:w="1" fg:x="177"/></g><g><title>_int_malloc (1 samples, 0.56%)</title><rect width=".559%" height="15" x="98.883%" y="389" fill="#DE550F" fg:w="1" fg:x="177"/></g><g><title>all (179 samples, 100%)</title><rect width="100%" height="15" x="0%" y="613" fill="#D2552F" fg:w="179" fg:x="0"/></g><g><title>zbus::Connectio (4 samples, 2.23%)</title><rect width="2.235%" height="15" x="97.765%" y="597" fill="#E0CE19" fg:w="4" fg:x="175"/><text x="98.015%" y="607.5">z..</text></g><g><title>__clone3 (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="98.324%" y="581" fill="#F3C913" fg:w="3" fg:x="176"/></g><g><title>start_thread (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="98.324%" y="565" fill="#EC3B04" fg:w="3" fg:x="176"/></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="98.324%" y="549" fill="#FEB32D" fg:w="3" fg:x="176"/></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="98.324%" y="533" fill="#E20E0A" fg:w="3" fg:x="176"/></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="98.324%" y="517" fill="#F41B29" fg:w="3" fg:x="176"/></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="98.324%" y="501" fill="#EB2320" fg:w="3" fg:x="176"/></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="98.324%" y="485" fill="#DA441F" fg:w="3" fg:x="176"/></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3 samples, 1.68%)</title><rect width="1.676%" height="15" x="98.324%" y="469" fill="#CF7825" fg:w="3" fg:x="176"/></g><g><title>zbus::socket_reader::SocketReader::receive_msg::{{closure}}::{{closure}} (2 samples, 1.12%)</title><rect width="1.117%" height="15" x="98.883%" y="453" fill="#E36200" fg:w="2" fg:x="177"/></g><g><title>zvariant::de::from_slice (1 samples, 0.56%)</title><rect width=".559%" height="15" x="99.441%" y="437" fill="#CF0703" fg:w="1" fg:x="178"/></g><g><title>&lt;&amp;mut zvariant::dbus::de::Deserializer&lt;B&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.56%)</title><rect width=".559%" height="15" x="99.441%" y="421" fill="#CE6213" fg:w="1" fg:x="178"/></g><g><title>zvariant::signature_parser::SignatureParser::next_signature (1 samples, 0.56%)</title><rect width=".559%" height="15" x="99.441%" y="405" fill="#D9051A" fg:w="1" fg:x="178"/></g><g><title>zvariant::signature_parser::SignatureParser::parse_next_signature (1 samples, 0.56%)</title><rect width=".559%" height="15" x="99.441%" y="389" fill="#EBBE26" fg:w="1" fg:x="178"/></g><g><title>zvariant::signature::Signature::slice (1 samples, 0.56%)</title><rect width=".559%" height="15" x="99.441%" y="373" fill="#F75618" fg:w="1" fg:x="178"/></g></svg></svg>